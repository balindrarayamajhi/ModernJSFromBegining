
what is asynchronous programming?

Synchronous code: 

        posts = loadPostSync();
        //... wait until posts are fetched 
        //... do something with post 

        doTheNextThing(); // has to wait until posts load i.e. blocking code 


Asynchronous code:

loadPostAsync(function(){
     //... wait until posts are fetched 
    //... do something with post 
});    // Does not have to wait until posts load 


Most of Async code work with will be part of an API library 

    -XMLttpRequest & Fetch 
    - jQuery Ajax, Axios , other HTTP libraries
    - Node.js fs(fiesystem) module


there are few ways to work with Async code
    -Callbacks 
    -Promises
    -Async/Await

What is AJAX?
    Asynchronous JavaScript &XML
    set of web technologies 
    send and recieve data asynchronously
    does not interface with current page
    JSON has replaced XML for the most part

    -make async request with the background(server,local machine, public            API)
    -no page reload/refresh 
    -fetch data 
    -very interactive

tool to validate jason - https://jasonlint.com


What is an API?

    contract provided by one piece of software to another
    structure request and response 

    An Application Programming Interface (API) allows two systems to communicate with one another. An API essentially provides the language and contract for how two systems interact. Each API has documentation and specifications which determine how information can be transferred.

REST - Representational State Transfer

    architecture style for designing networked applications 
    relies on a stateless, client-server protocol, almost always HTTP
    treats server objects as resources that can be created or destroyed 
    can be used by virtaully any programming language 
    all APIs have their own rules and structure.

HTTP Requests

    GET : Retrieve data from a specified resources
    POST : Submit data to be processed to a specified resource 
    PUT : Update a specified resource 
    DELETE : Delete a specified resource 

    HEAD : Same as get but does not return a body 
    OPTIONS : Returns the supported HTTP methods 
    PATCH : Update partial resources 

API Endpoints 

    It's one ens of communication channel, so often would be represented as URL of a server or service.

    Simply put, an endpoint is one end of a communication channel. When an API interacts with another system, the touchpoints of this communication are considered endpoints. For APIs, an endpoint can include a URL of a server or service. Each endpoint is the location from which APIs can access the resources they need to carry out their function.

    APIs work using ‘requests’ and ‘responses.’ When an API requests information from a web application or web server, it will receive a response. The place that APIs send requests and where the resource lives,is called an endpoint.


GET          https://myurl.com/api/users             //GET ALL USERS
GET          https://myurl.com/api/users/1           //GET A SINGLE USER
POST         https://myurl.com/api/users/1           // ADD USER , CREATE 
PUT          https://myurl.com/api/users/1           //UPDATE USER
DELETE       https://myurl.com/api/users/1           //DELETE USER


CALLBACK FUNCTION 
    Simply put: 
        A callback is a function that is to be executed after another function has finished executing — hence the name ‘call back’.

    More complexly put: 
        In JavaScript, functions are objects. Because of this, functions can take functions as arguments, and can be returned by other functions. Functions that do this are called higher-order functions. Any function that is passed as an argument is called a callback function.


Why do we need Callbacks?
    For one very important reason 
        JavaScript is an event driven language. This means that instead of waiting for a response before moving on, JavaScript will keep executing while listening for other events

    Lets look at a basic example:  

            function first(){
            console.log(1);
            }
            function second(){
            console.log(2);
            }
            first();
            second();  

    As you would expect, the function first is executed first, and the function second is executed second — logging the following to the console:    
                1
                2       

    All good so far.
    But what if function first contains some sort of code that can’t be executed immediately? For example, an API request where we have to send the request then wait for a response? To simulate this action, were going to use setTimeout which is a JavaScript function that calls a function after a set amount of time. We’ll delay our function for 500 milliseconds to simulate an API request. Our new code will look like this:

            function first(){
            // Simulate a code delay
            setTimeout( function(){
                console.log(1);
            }, 500 );
            }
            function second(){
            console.log(2);
            }
            first();
            second();

     we’ve moved our console.log(1); inside of our 500 millisecond delay. So what happens now when we invoke our functions?     

                first();
                second();
                // 2
                // 1  

    Even though we invoked the first() function first, we logged out the result of that function after the second() function.

 DEFINING CALLBACK 

        function doHomework(subject, callback) {
            alert(`Starting my ${subject} homework.`);
            callback();
        }

        doHomework('math', function() {
            alert('Finished my homework');
        });

    Our last parameter in the doHomework() function we can pass in callback. The callback function is then defined in the second argument of our call to doHomework().        

        doHomework('math', function() {
            alert('Finished my homework');
        });

    Callback functions don’t always have to be defined in our function call. They can be defined elsewhere in our code like this:  

        function doHomework(subject, callback) {
        alert(`Starting my ${subject} homework.`);
        callback();
        }
        function alertFinished(){
        alert('Finished my homework');
        }
        doHomework('math', alertFinished);


Asynchronous and synchronous call back 

setTimeout() is asynchronous callback .