source =https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/#targetText=Arrow%20functions%20%E2%80%93%20also%20called%20%E2%80%9Cfat,way%20this%20binds%20in%20functions.



What is arrow function?
    Arrow functions – also called “fat arrow” functions, from CoffeeScript (a transcompiled language) — are a more concise syntax for writing function expressions. They utilize a new token, =>, that looks like a fat arrow. Arrow functions are anonymous and change the way this binds in functions.

    Arrow functions make our code more concise, and simplify function scoping and the this keyword. They are one-line mini functions which work much like Lambdas in other languages like C# or Python. (See also lambdas in JavaScript). By using arrow functions, we avoid having to type the function keyword, return keyword (it’s implicit in arrow functions), and curly brackets.

Basic syntax for multiple parameters    

        // (param1, param2, paramN) => expression

        // ES5
        var multiplyES5 = function(x, y) {
        return x * y;
        };

        // ES6
        const multiplyES6 = (x, y) => { return x * y };

    Curly brackets aren’t required if only one expression is present. The preceding example could also be written as:

        const multiplyES6 = (x, y) => x * y;  

Basic Syntax with One Parameter  
Parentheses are optional when only one parameter is present

    //ES5
    var phraseSplitterEs5 = function phraseSplitter(phrase) {
    return phrase.split(' ');
    };

    //ES6
    const phraseSplitterEs6 = phrase => phrase.split(" ");

    console.log(phraseSplitterEs6("ES6 Awesomeness"));  
      // ["ES6", "Awesomeness"]


No Parameters
Parentheses are required when no parameters are present.

    //ES5
    var docLogEs5 = function docLog() {
        console.log(document);
    };

    //ES6
    var docLogEs6 = () => { console.log(document); };
    docLogEs6(); 


Object Literal Syntax
    Arrow functions, like function expressions, can be used to return an object literal expression. The only caveat is that the body needs to be wrapped in parentheses, in order to distinguish between a block and an object (both of which use curly brackets).

            //ES5
            var setNameIdsEs5 = function setNameIds(id, name) {
            return {
                id: id,
                name: name
            };
            };

            // ES6
            var setNameIdsEs6 = (id, name) => ({ id: id, name: name });

            console.log(setNameIdsEs6 (4, "Kyle"));   // Object {id: 4, name: "Kyle"}     

Use Cases for Arrow Functions

1.One common use case for arrow functions is array manipulation and the like. It’s common that you’ll need to map or reduce an array. Take this simple array of objects:

        const smartPhones = [
        { name:'iphone', price:649 },
        { name:'Galaxy S6', price:576 },
        { name:'Galaxy Note 5', price:489 }
        ];
    We could create an array of objects with just the names or prices by doing this in ES5:

        // ES5
        var prices = smartPhones.map(function(smartPhone) {
        return smartPhone.price;
        });
       console.log(prices); // [649, 576, 489]

    An arrow function is more concise and easier to read:

        // ES6
        const prices = smartPhones.map(smartPhone => smartPhone.price);
        console.log(prices); // [649, 576, 489]

2.Here’s another example using the array filter method:

        const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];

        // ES5
        var divisibleByThrreeES5 = array.filter(function (v){
        return v % 3 === 0;
        });

        // ES6
        const divisibleByThrreeES6 = array.filter(v => v % 3 === 0);

        console.log(divisibleByThrreeES6); // [3, 6, 9, 12, 15]        

3 Promises and Callbacks  

    Code that makes use of asynchronous callbacks or promises often contains a great deal of function and return keywords. When using promises, these function expressions will be used for chaining. Here’s a simple example of chaining promises from the MSDN docs:

            // ES5
            aAsync().then(function() {
            returnbAsync();
            }).then(function() {
            returncAsync();
            }).done(function() {
            finish();
            });
This code is simplified, and arguably easier to read using arrow functions:

            // ES6
            aAsync().then(() => bAsync()).then(() => cAsync()).done(() => finish);


What’s the meaning of this?!      

    The other benefit of using arrow functions with promises/callbacks is that it reduces the confusion surrounding the this keyword. In code with multiple nested functions, it can be difficult to keep track of and remember to bind the correct this context. In ES5, you can use workarounds like the .bind method (which is slow) or creating a closure using var self = this;.

    Because arrow functions allow you to retain the scope of the caller inside the function, you don’t need to create self = this closures or use bind.

    Developer Jack Franklin provides an excellent practical example of using the arrow function lexical this to simplify a promise:

    Without Arrow functions, the promise code needs to be written something like this:

            // ES5
            API.prototype.get = function(resource) {
            var self = this;
            return new Promise(function(resolve, reject) {
                http.get(self.uri + resource, function(data) {
                resolve(data);
                });
            });
            };


    Using an arrow function, the same result can be achieved more concisely and clearly:

            // ES6
            API.prototype.get = function(resource) {
            return new Promise((resolve, reject) => {
                http.get(this.uri + resource, function(data) {
                resolve(data);
                });
            });
            };
    You can use function expressions if you need a dynamic this and arrow functions for a lexical this.